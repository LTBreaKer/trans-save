# compose_version: '3.8'
services:
  auth-api:
    image: auth
    container_name: auth-api
    build: ./backend/auth
    ports:
      - 8000:8000
    volumes:
      - auth:/authentication
    command: python manage.py runsslserver --certificate /etc/ssl/certs/cert.pem --key /etc/ssl/private/cert-key.pem 0.0.0.0:8000
    # command: python -m gunicorn auth.asgi:application -k uvicorn.workers.UvicornWorker --certfile=/etc/ssl/certs/cert.pem --keyfile=/etc/ssl/private/cert-key.pem --bind 0.0.0.0:8000
    # command: gunicorn --certfile=/etc/ssl/certs/cert.pem --keyfile=/etc/ssl/private/cert-key.pem auth.wsgi:application --bind 0.0.0.0:8000
    entrypoint: /entrypoint.sh
    env_file:
      - .env
    depends_on:
      - db
      - user-management-api
    restart: always
    networks:
      - my_network
  user-management-api:
    image: user-management
    container_name: user-management-api
    build: ./backend/user_management
    ports:
      - 8001:8001
    volumes:
      - user-manage:/user_management
    entrypoint: /entrypoint.sh
    env_file:
      - .env
    depends_on:
      - db
    restart: always
    networks:
      - my_network
    # command: python manage.py runsslserver --certificate /etc/ssl/certs/cert.pem --key /etc/ssl/private/cert-key.pem 0.0.0.0:8001
    command: python -m gunicorn user_management.asgi:application -k uvicorn.workers.UvicornWorker --certfile=/etc/ssl/certs/cert.pem --keyfile=/etc/ssl/private/cert-key.pem --bind 0.0.0.0:8001
  game-db:
    image: game-db
    container_name: game-db-api
    build: ./backend/game_db
    ports:
      - 8002:8002
    volumes:
      - game-db:/game_db
    entrypoint: /entrypoint.sh
    env_file:
      - .env
    depends_on:
      - db
    restart: always
    networks:
      - my_network
    command: python -m gunicorn game_db.asgi:application -k uvicorn.workers.UvicornWorker --certfile=/etc/ssl/certs/cert.pem --keyfile=/etc/ssl/private/cert-key.pem --bind 0.0.0.0:8002
    # command: python manage.py runsslserver --certificate /etc/ssl/certs/cert.pem --key /etc/ssl/private/cert-key.pem 0.0.0.0:8002
  tag-game-db:
    image: tag-game-db
    container_name: tag-game-api
    build: ./backend/tag_game_db
    ports:
      - 8003:8003
    volumes:
      - tag-game-db:/tag_game_db
    entrypoint: /entrypoint.sh
    env_file:
      - .env
    depends_on:
      - db
    restart: always
    networks:
      - my_network
    command: python -m gunicorn tag_game_db.asgi:application -k uvicorn.workers.UvicornWorker --certfile=/etc/ssl/certs/cert.pem --keyfile=/etc/ssl/private/cert-key.pem --bind 0.0.0.0:8003
    # command: python manage.py runsslserver --certificate /etc/ssl/certs/cert.pem --key /etc/ssl/private/cert-key.pem 0.0.0.0:8003
  tournament-db:
    image: tournament-db
    container_name: tournament-api
    build: ./backend/tournament
    ports:
      - 8004:8004
    volumes:
      - tournament-db:/tournament
    entrypoint: /entrypoint.sh
    env_file:
      - .env
    depends_on:
      - db
      # - blockchain
    restart: always
    networks:
      - my_network
    command: python manage.py runsslserver --certificate /etc/ssl/certs/cert.pem --key /etc/ssl/private/cert-key.pem 0.0.0.0:8004
  server:
    image: server
    container_name: server
    build: ./server
    ports:
      - 0.0.0.0:9002:443
      - 0.0.0.0:9003:80
      - 0.0.0.0:9004:9004
      - 0.0.0.0:9005:9005
      - 0.0.0.0:9006:9006
      - 0.0.0.0:9007:9007
      - 0.0.0.0:9008:9008
    restart: always
    volumes:
      - front:/var/www/pong.com
      - ./backend/auth/media:/media
    depends_on:
      - auth-api
      - user-management-api
      - game-db
    networks:
      - my_network
  db:
    # image: postgres:15.6
    image: db
    build:
      context: ./db
      args:
        - AUTH_DB=${AUTH_DB}
        - USER_MANAGEMENT_DB=${USER_MANAGEMENT_DB}
        - GAME_DB=${GAME_DB}
        - TAG_GAME_DB=${TAG_GAME_DB}
        - TOURNAMENT_DB=${TOURNAMENT_DB}
    container_name: db
    env_file:
      - .env
    ports:
      - 0.0.0.0:5432:5432
    restart: always
    # entrypoint: bash -c "sleep infinity"
    # command: bash -c "groupadd -g 2019 2019 && useradd -u 1000 -g 2019 -m aharrass && chmod -R 700 /var/lib/postgresql/data && gosu aharrass /usr/local/bin/docker-entrypoint.sh postgres"
    # user: "postgres:postgres"
    # entrypoint: /db.sh
    command: postgres
    networks:
      - my_network
    # volumes: 
    #   - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # volumes:
    #   - /nfs/homes/aharrass/data/postgres:/var/lib/postgresql/data
  # redis:
  #   image: redis_i
  #   build:
  #     context: ./redis
  #   container_name: redis_c
  #   ports:
  #    - 6380:6380
  #   restart: always
  #   networks:
  #     - my_network
  #   command: redis-server /etc/redis/redis.conf

  # blockchain:
  #   image: blockchain
  #   build: ./backend/blockchain
  #   container_name: blockchain
  #   ports:
  #     - 9545:9545
  #   restart: always
  #   entrypoint: truffle develop > /hmmm
  #   networks:
  #     - my_network
  backend:
    container_name: back
    build: ./backend/Tag
    ports:
      - 8005:8000 
    command: python manage.py runserver 0.0.0.0:8000
    
    volumes:
      - ./backend/Tag/project:/usr/src/app/vv
volumes:
  auth:
    driver: local
    driver_opts:
      type: none
      device: ./backend/auth
      o: bind
  user-manage:
    driver: local
    driver_opts:
      type: none
      device: ./backend/user_management
      o: bind
  game-db:
    driver: local
    driver_opts:
      type: none
      device: ./backend/game_db
      o: bind
  tag-game-db:
    driver: local
    driver_opts:
      type: none
      device: ./backend/tag_game_db
      o: bind
  tournament-db:
    driver: local
    driver_opts:
      type: none
      device: ./backend/tournament
      o: bind
  front:
    driver: local
    driver_opts:
      type: none
      device: ./server/front
      o: bind

networks:
  my_network:
    driver: bridge
